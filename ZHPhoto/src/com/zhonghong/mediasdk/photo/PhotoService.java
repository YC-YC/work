package com.zhonghong.mediasdk.photo;import java.io.File;import java.io.IOException;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.Currency;import java.util.List;import java.util.Random;import android.app.Service;import android.appwidget.AppWidgetManager;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.media.AudioManager;import android.media.AudioManager.OnAudioFocusChangeListener;import android.media.MediaPlayer;import android.net.Uri;import android.os.Binder;import android.os.Handler;import android.os.IBinder;import android.os.Looper;import android.os.Message;import android.os.RemoteException;import android.provider.Contacts;import android.util.Log;import android.view.Gravity;import android.view.SurfaceHolder;import android.view.SurfaceView;import android.widget.Toast;import com.zhonghong.mediasdk.photo.IPhotoStatusCB;import com.zhonghong.mediasdk.BaseData;import com.zhonghong.mediasdk.Constants;import com.zhonghong.mediasdk.DeviceInfo;import com.zhonghong.mediasdk.FolderData;import com.zhonghong.mediasdk.MediaContainer;import com.zhonghong.mediasdk.MediaError;import com.zhonghong.mediasdk.PlaybackStatus;import com.zhonghong.mediasdk.MediaContainer.DataLoadCompleteListenser;/** *  * @author victorchen */public class PhotoService extends Service {	private static final String TAG = "PhotoService";		private final IBinder mBinder = new LocalBinder();		private DiskChangeReceiver receiver;	public MediaContainer mMediaCont = MediaContainer.getInstance();	private IPhotoStatusCB mPhotoStatusCB = null;	// recording the seek position while preparing	private List<BaseData> LocalPhotoList = new ArrayList<BaseData>();	private int iCurrPosition = 0;	private int nullFileNum;	private int iPBDevId = Constants.INTERNAL_DEVICE;	private int iCurrPlaymode = Constants.PM_REPALL;    private PlaybackStatus mPbStautsClone = new PlaybackStatus();    private PlaybackStatus mPbStauts = new PlaybackStatus();//    public IZUIAppService mZUIService = null;    private boolean mhasClientBind = false;    private final int DEF_NAV_PHOTO_INTERVAL = 5000; //ms    private final int BIND_CHECKPLAY_DELAYTIME = 10; //bind and to check player delay time 10ms    private final int CHECK_PLAYER = 1000;    private final int RECHECK_PLAYER = 1001;	// ///////////////////////////////////////////////////////////////////////////////////////////////	/**	 * 	 * @param ivalue	 */	private void NotifyAndroidState(int ivalue)	{/*		if(mZUIService != null)		{			try{				mZUIService.NotifyAndroidState(ivalue);			}catch (RemoteException e) {				e.printStackTrace();			}			}*/	}		/**	 * 	 * @param ivalue	 */	private void NotifyAndroidUIKey(int ivalue)	{/*		if(mZUIService != null)		{			try{				mZUIService.NotifyAndroidUIKey(ivalue);			}catch (RemoteException e) {				e.printStackTrace();			}			}*/	}	// Service define	@Override	public IBinder onBind(Intent arg0) {		Log.d(TAG,"onBind");		clientConnectInitial();		return mBinder;	}	@Override	public boolean onUnbind(Intent intent){		Log.d(TAG,"onUnbind");		clientDisconnectDestroy();		return true;	}		@Override	public void onRebind(Intent intent){		Log.d(TAG,"onRebind");		clientConnectInitial();	}		@Override	public void onCreate() {		super.onCreate();		//inital ZUIService Obj					IntentFilter filter = new IntentFilter();		filter.addAction(Intent.ACTION_MEDIA_MOUNTED);		filter.addAction(Intent.ACTION_MEDIA_EJECT);		filter.addDataScheme("file");		receiver = new DiskChangeReceiver();		registerReceiver(receiver, filter);				//register ZUI broadcast		IntentFilter mFilter = new IntentFilter();		mFilter.addAction(Constants.CARUI_EXIT_ACTION);			mFilter.addAction(Constants.CARUI_KEY_ACTION);		mFilter.addAction(Constants.ACTION_ZHMEDIA_SCANNER_STARTED);		mFilter.addAction(Constants.ACTION_ZHMEDIA_SCANNER_FINISHED);		registerReceiver(mZUIReceiver, mFilter);			        //Set default music Status Listener        mPhotoStatusCB = defPhotoStatusListener; 	}		@Override	public int onStartCommand(Intent intent, int flags, int startId) {		Log.d(TAG, "onStartCommand player");		//return  START_STICKY;		return super.onStartCommand(intent, flags, startId);	}	@Override	public void onDestroy() {		Log.d(TAG, "onDestroy player");		mMediaCont.saveMediaInfoToPerf(Constants.MEDIA_TYPE_PHOTO);		unregisterReceiver(receiver);		unregisterReceiver(mZUIReceiver);		mHandler.removeCallbacksAndMessages(null);		super.onDestroy();	}	/**	 * 	 */	 private Handler mHandler = new Handler() {	 	        @Override	        public void handleMessage(Message msg){	        		//Log.d(TAG,"mHandler.handleMessage " + msg.what+" arg1 "+msg.arg1);        		switch(msg.what){	                	        			                case CHECK_PLAYER:                	checkPlayer();                	break;                case RECHECK_PLAYER:                    default:                    	break;        		}	        }	 };	  	 /**	  * 	  */	 private void clientConnectInitial(){			mhasClientBind = true;			initalPhotoPBInfo();			//broadCastAppName();			mHandler.postDelayed(mPlaybackStatusUpdateRunnable, 10);			mHandler.sendEmptyMessageDelayed(CHECK_PLAYER, BIND_CHECKPLAY_DELAYTIME);	 }	 	 /**	  * 	  */	 private void clientDisconnectDestroy(){			NotifyAndroidState(100);			mPbStauts.iPlayStatus = Constants.PB_PAUSE;			mHandler.removeCallbacks(mPlaybackStatusUpdateRunnable);			mHandler.removeCallbacks(mPlaybackRunnable);			mhasClientBind = false; 	 }	 	/**	 * 	 */	private void broadCastAppName(){		String name = mMediaCont.getActivityLabelString(new ComponentName(Constants.PHOTOAPP_PKG, Constants.PHOTOAPP_CLS));		if(name != null){					//broadcast activity name	        Intent intent0 = new Intent("com.zhonghong.systemui.activity");	        intent0.putExtra("packageName","com.zhonghong.media");	        intent0.putExtra("appName",name);	        sendBroadcast(intent0);		}	}			/**	 * 	 */	 private void initalPhotoPBInfo(){		 mPbStauts.iPlayStatus = Constants.PB_PAUSE;		 mPbStauts.iTotalTime = DEF_NAV_PHOTO_INTERVAL;   //for playback interval	 }	/**	 * @author victorchen	 */	private Runnable mPlaybackStatusUpdateRunnable = new Runnable(){		@Override		public void run(){					//playback status			//mPbStauts.iPlayStatus = Constants.PB_PLAY;//(mCurrentState == STATE_PLAYING)?Constants.PB_PLAY:Constants.PB_PAUSE ;			mPbStauts.iCurrFBDev = iPBDevId;			mPbStauts.iCurrPBIndexOnTotal = iCurrPosition;			mPbStauts.iMute = 0;			mPbStauts.iPlayMode = iCurrPlaymode;			mPbStauts.iStartTime = 0;			mPbStauts.iCurrentTime = 0;			//mPbStauts.iTotalTime = 0;			mPbStauts.iTotalNum = (LocalPhotoList!= null)?LocalPhotoList.size():0; 						//check whether equal?			if(!mPbStautsClone.equals(mPbStauts)){				sendPBStatusToUI(mPbStauts);				PlaybackStatus.CopyValue(mPbStauts, mPbStautsClone);			}			//Loop check playbck status			if(mhasClientBind){				mHandler.postDelayed(mPlaybackStatusUpdateRunnable, 500);			}		}	};	/**	 * @author victorchen	 */	private Runnable mPlaybackRunnable = new Runnable(){		@Override		public void run(){			mPhotoStatusCB.photoCompleted();			//Loop check playbck status			if(mhasClientBind){				mHandler.postDelayed(mPlaybackRunnable, mPbStauts.iTotalTime);			}		}	};	private BroadcastReceiver mZUIReceiver = new BroadcastReceiver(){		@Override		public void onReceive(Context context, Intent intent) {			String action = intent.getAction().toString();					 if(Constants.ACTION_ZHMEDIA_SCANNER_STARTED.equals(action)){				if(IsserviceWaittingPlaybackStatus()){					sendStrMessageToUI(Constants.RESCAN_MEDIA_DEV);					mHandler.sendEmptyMessage(CHECK_PLAYER);				}			}		}	};		/**	 * @author victorchen	 */	private boolean IsserviceWaittingPlaybackStatus(){		if(mhasClientBind){			return true;		}				return false;	}		/**	 * 	 * @author Administrator	 *	 */	private class DiskChangeReceiver extends BroadcastReceiver {		@Override		public void onReceive(Context context, Intent intent) {			String path = null;			String action = intent.getAction();			Uri uri = intent.getData();			if(uri != null){				path = uri.getPath();			}			Log.d(TAG, "DiskChangeReceiver: " + action+" path "+path);			if (action.equals(Intent.ACTION_MEDIA_EJECT)) {				if(uri!= null && path.startsWith(mMediaCont.getCurrentPlaybackDevicePath(Constants.MEDIA_TYPE_PHOTO))){					notifyChange("diskeject");				    LocalPhotoList.clear();				    mMediaCont.resetPlaybackInfo(Constants.MEDIA_TYPE_PHOTO);				    mPhotoStatusCB.photoFinish();				    mMediaCont.saveMediaInfoToPerf(Constants.MEDIA_TYPE_PHOTO);					}						}else if(action.equals(Intent.ACTION_MEDIA_MOUNTED)){			}		}	}		public class LocalBinder  extends Binder {			PhotoService getService(){					return PhotoService.this;				}			}			public void setPhotoStatusCB(IPhotoStatusCB PhotoStatusCB) {			// TODO Auto-generated method stub			if(mPhotoStatusCB != null){				mPhotoStatusCB = PhotoStatusCB;			}			else{				mPhotoStatusCB = defPhotoStatusListener;			}		}		public void unsetPhotoStatusCB(){			// TODO Auto-generated method stub			mPhotoStatusCB = defPhotoStatusListener;		}				public int checkDevDBStatus(int idevid){							return mMediaCont.getDeviceDBStatusByDevID(idevid);		}				public List<FolderData> getDevFolderData(int idevid){			// TODO Auto-generated method stub			if(!(mMediaCont.checkMountedDeviceId(idevid))){				Log.d(TAG,"getDevFolderData [FAIL] DEVICE NO MOUNT,"+idevid);				return null;			}			//Log.d(TAG,"getDevFolderData "+idevid+" fdlist "+mMediaCont.getDeviceInfoByDevID(idevid).mMusicFolderList);			return mMediaCont.getDeviceInfoByDevID(idevid).mPhotoFolderList;		}		public List<BaseData> getDevBaseData(int idevid) {			// TODO Auto-generated method stub			if(!(mMediaCont.checkMountedDeviceId(idevid))){				Log.d(TAG,"getDevBaseData [FAIL] DEVICE NO MOUNT,"+idevid);				return null;			}			//Log.d(TAG,"getDevBaseData "+idevid+" fllist "+mMediaCont.getDeviceInfoByDevID(idevid).mMusicTotalList);			return mMediaCont.getDeviceInfoByDevID(idevid).mPhotoTotalList;		}		public int checkValidDeviceID(int idevid) {			// TODO Auto-generated method stub			if(mMediaCont.checkValidDeviceID(idevid)){				return idevid;			}			Log.d(TAG,"selectBrowserDevice: [FAIL],idevid:"+idevid);			return Constants.INTERNAL_DEVICE;		}				/**		 * getPlaybackFilePath		 */		public String getPlaybackFilePath(){			return mMediaCont.getCurrentPlaybackFilePath(Constants.MEDIA_TYPE_PHOTO);		}				/**		 * playPhoto		 */		public boolean playPhoto(int idevid,int index, String path) {			String strPath = null;			// TODO Auto-generated method stub						if(path != null){	        	//store pb device	        	iPBDevId = Constants.INVALID_DEVICE;				notifyChange(Constants.META_CHANGED);			}else{				strPath = getFilePathFromDev(idevid,index);				if(strPath != null){					iCurrPosition = index;					if(idevid != iPBDevId){						initDefUserPlayList(idevid);					}		        	//store pb device		        	iPBDevId = idevid;		        	try{		        	mMediaCont.setCurrentPlayPosition(Constants.MEDIA_TYPE_PHOTO,0);		    		mMediaCont.setCurrentPlayIndex(Constants.MEDIA_TYPE_PHOTO,iCurrPosition);		    		mMediaCont.setCurrentPlaybackFilePath(Constants.MEDIA_TYPE_PHOTO,strPath);		        	mMediaCont.setCurrentPlaybackDeviceID(Constants.MEDIA_TYPE_PHOTO,iPBDevId);		        	}catch(Exception e){		        		e.printStackTrace();		        	}		        	Log.d(TAG,"playPhoto idevid:"+idevid+" "+"index:"+index+" "+"path:"+path);		        	sendStrMessageToUI(Constants.PLAYER_READY);					notifyChange(Constants.META_CHANGED);				}			}			mMediaCont.setCurrentPlaybackDeviceID(Constants.MEDIA_TYPE_PHOTO,iPBDevId);			return false;		}		public DeviceInfo getDeviceInfo(int idevid) {			// TODO Auto-generated method stub			if(!(mMediaCont.checkMountedDeviceId(idevid))){				Log.d(TAG,"getDeviceInfo [FAIL] DEVICE NO MOUNT,"+idevid);				return null;			}			Log.d(TAG,"getDeviceInfo "+idevid);			return mMediaCont.getDeviceInfoByDevID(idevid);		}			public void setMute(int imute) {			// TODO Auto-generated method stub		}		public Bitmap getPhotoThumbnail() {			// TODO Auto-generated method stub			return null;		}		public BaseData getDetailBaseData(int idevid,int index){			// TODO Auto-generated method stub			if(!(mMediaCont.checkMountedDeviceId(idevid))){				Log.d(TAG,"getDetailBaseData [FAIL] DEVICE NO MOUNT,"+idevid);				return null;			}						if(index < 0 ||index >= mMediaCont.getDeviceInfoByDevID(idevid).mPhotoTotalList.size()){				Log.d(TAG,"getDetailBaseData [FAIL] invalid index:"+index);				return null;			}						return mMediaCont.getDeviceInfoByDevID(idevid).mPhotoTotalList.get(index);		}    /**     * Notify the change-receivers that something has changed.     */    private void notifyChange(String what) {        if (what.equals(Constants.PLAYSTATE_CHANGED)) {        } else if (what.equals(Constants.META_CHANGED)) {        }    }       public void prev() {        synchronized (this) {        	if(/*isPlaying()*/ true)        	{	        	if(getPrevNextIndex(false))	        	{	        		openPhotoPlayer(getPath());	        	}        	}            Log.d(TAG,"prev");        }    }         /*     *      */    public void next(){        synchronized (this) {        	if(/*isPlaying()*/true)        	{	        	if(getPrevNextIndex(true))	        	{		        		openPhotoPlayer(getPath());	        	}                  	}        	 Log.d(TAG,"next");        }    }        /**     * @param idev     * @param index     * @return     */    public String getFilePathFromDev(int idev,int index){    	String path = null;    	DeviceInfo devinfo = null;    	if(mMediaCont.checkMountedDeviceId(idev)){    		devinfo = mMediaCont.getDeviceInfoByDevID(idev);    		if(devinfo != null && devinfo.mPhotoTotalList != null && index < devinfo.mPhotoTotalList.size()){    			path = devinfo.mPhotoTotalList.get(index).getPath();    		}    	}    	return path;    }        /**     *      * @return     */    public String getPath()    {    	if((iCurrPosition >= 0) && (iCurrPosition < LocalPhotoList.size()))		{    		return LocalPhotoList.get(iCurrPosition).getPath();		}    	return null;    }    		/*	 * get previous or next index	 */	protected boolean getPrevNextIndex(boolean isNext) {		boolean bRetVal = true;				if(LocalPhotoList.size() <= 0)		{			Log.d(TAG,"getPrevNextIndex LocalPhotoList.size "+LocalPhotoList.size());			return false;		}				switch (iCurrPlaymode) {		case Constants.PM_REPSINGLE:			break;		case Constants.PM_RANDOM:			if (LocalPhotoList.size() - 1 <= 0) {				iCurrPosition = 0;			} else {				iCurrPosition = new Random().nextInt(LocalPhotoList.size() - 1);				bRetVal = checkFileSize(1);			}			break;		case Constants.PM_REPALL:			if (isNext) {				if (iCurrPosition >= LocalPhotoList.size() - 1) {					iCurrPosition = 0;				} else {					iCurrPosition++;				}				bRetVal = checkFileSize(1);			} else {				if (LocalPhotoList.size() > 0) {					if (iCurrPosition - 1 >= 0) {						iCurrPosition--;					} else {						iCurrPosition = LocalPhotoList.size() - 1;					}				bRetVal = checkFileSize(-1);				}			}			break;		}		return bRetVal;	}	    private boolean checkFileSize(int alpha)	{    	try{			BaseData data = LocalPhotoList.get(iCurrPosition);			Log.d(TAG, "data.getSize() = " + data.getSize());			if("0B".equals(data.getSize()))			{				//showToastTip(data.getName() + " is an empty file!");				nullFileNum++;				if(LocalPhotoList.size() == nullFileNum)				{					return false;				}				iCurrPosition += alpha;				if (iCurrPosition >= LocalPhotoList.size())					iCurrPosition = 0;	            else if (iCurrPosition <= -1) {	            	iCurrPosition = LocalPhotoList.size() - 1;		    		}				checkFileSize(alpha);			}			nullFileNum = 0;			return true;    	}catch(IndexOutOfBoundsException e){    		e.printStackTrace();    		Log.e(TAG,"checkFileSize fail "+iCurrPosition);    		return false;    	}	} 	/*	 * process default play completion	 */	protected void defprocessPlayCompletion() {		next();	}		/*	 * init defalut playlist	 */	private void initDefUserPlayList(int idevid)	{		if(mMediaCont.checkDeviceDBFinishedByDevId(idevid)){			//LocalPhotoList.clear();			//LocalPhotoList.addAll((ArrayList<BaseData>)mMediaCont.getMediaDataByDevId(idevid,Constants.FILE_TYPE_TTPHOTOS));			LocalPhotoList = (ArrayList<BaseData>)mMediaCont.getMediaDataByDevId(idevid,Constants.FILE_TYPE_TTPHOTOS);			Log.d(TAG,"LocalPhotoList.size()"+LocalPhotoList.size()+"LocalPhotoList:"+LocalPhotoList);		}		else{			Log.d(TAG,"Make sure media database ready initial finished!");		}	}		/*	 * get Last songs index	 */	private int getLastPlayPhotoIndex() {		return mMediaCont.getCurrentPlayIndex(Constants.MEDIA_TYPE_PHOTO);	}		/*	 * 	 */	private String getLastPlayPhotoPath(){		if(LocalPhotoList != null && LocalPhotoList.size() > 0)		{			int iCurrIndex = getLastPlayPhotoIndex();			if((iCurrIndex >= 0)&&(iCurrIndex < LocalPhotoList.size())){				iCurrPosition = iCurrIndex;			}			else{				iCurrPosition = 0;			}			return LocalPhotoList.get(iCurrPosition).getPath();		}		return null;	}	      /**     *      *      */    private boolean sendPBStatusToUI(PlaybackStatus pbstatus){		try{			mPhotoStatusCB.updatePlaybackStatus(pbstatus);		}catch(Exception e){			e.printStackTrace();			return false;		}		return true;    }        /**     *      * @param msg     * @return     */    private boolean sendStrMessageToUI(String msg){		try{			mPhotoStatusCB.handleMessageInfo(msg);		}catch(Exception e){			e.printStackTrace();			return false;		}		return true;    }        /**@author victor.chen     * checkPlayer     */    private void checkPlayer(){    	restartplay();    }        /**     * @author chendz      *      */	DataLoadCompleteListenser datalistenser = new DataLoadCompleteListenser(){			public void notifyFailed(String reason){			Log.d(TAG,"notifyFailed "+reason);			if(reason.equalsIgnoreCase(Constants.DB_ERROR_NOFILE)){				//no playback device				iPBDevId = -1;				sendStrMessageToUI(Constants.NO_PHOTO_FILE);			}		}		@Override		public void notifyComplete(int idevid) {			// TODO Auto-generated method stub			Log.d(TAG,"notifyComplete "+idevid);						if(IsserviceWaittingPlaybackStatus()){	        	initDefUserPlayList(idevid);	        		        	//mVSVStaus.iPlayerStatus = Constants.MP_READY;	        	//store pb device	        	iPBDevId = idevid;	        	mMediaCont.setCurrentPlaybackDeviceID(Constants.MEDIA_TYPE_PHOTO,iPBDevId);	        	resumePlayLastPos();	        	sendStrMessageToUI(Constants.PLAYER_READY);			}else{				Log.d(TAG,"Music service already,ignore it. idevid:"+idevid);			}		}	};		/**	 * 	 */	private void resumePlayLastPos(){    	if(mMediaCont.checkValidPlaybackAddress(Constants.MEDIA_TYPE_PHOTO,LocalPhotoList)){        	String path = getLastPlayPhotoPath();        	int iPos = mMediaCont.getCurrentPlayPosition(Constants.MEDIA_TYPE_PHOTO);        	if(path != null){        		openPhotoPlayer(path);        		Log.d(TAG,"Service resume play Photo [OK],path: "+path);        	}else{        		playFirstPhoto();        	}    	}else{    		playFirstPhoto();    		Log.d(TAG,"Service resume play Photo [OK],First Photo");    	}	}		/**	 * 	 */	private void playFirstPhoto(){		String path = getCurrentDevPathByPos(0);		if(path != null){			openPhotoPlayer(path);		}else{			Log.d(TAG,"Service play first photo [FAIL],path: "+path);		}	}		/**	 * photo player only setting playback path	 */	private void openPhotoPlayer(String path){		mMediaCont.setCurrentPlayIndex(Constants.MEDIA_TYPE_PHOTO,iCurrPosition);		mMediaCont.setCurrentPlaybackFilePath(Constants.MEDIA_TYPE_PHOTO,path);	}		/**	 * 	 * @param index	 * @return	 */	private String getCurrentDevPathByPos(int index){		if(index <0 || index > LocalPhotoList.size()){			Log.d(TAG,"getCurrentDevPathByPos [FAIL] "+index);			return null;		}				return LocalPhotoList.get(index).getPath();	}		/**	 * restart player	 */	private void restartplay(){		Log.d(TAG,"restartplay to play music,play last power off pos.");		mMediaCont.startScanDeviceData(Constants.USB_DEVICE,Constants.FILE_TYPE_PICTURE,datalistenser);	}		/**	 * play	 */	public void play(){		if(mhasClientBind){			mPbStauts.iPlayStatus = Constants.PB_PLAY;			mHandler.postDelayed(mPlaybackRunnable, mPbStauts.iTotalTime);		}	}	/**	 * pause	 */	public void pause(){		mPbStauts.iPlayStatus = Constants.PB_PAUSE;		mHandler.removeCallbacks(mPlaybackRunnable);	}		public void setPhotoPBInterval(int isec){		mPbStauts.iTotalTime = isec;	}	/**	 * 		 * @param repeatmode	 */	public void setRepeatMode(int repeatmode){		if(repeatmode <= Constants.MAX_PLAYMODE){			iCurrPlaymode = repeatmode;		}else{			iCurrPlaymode = Constants.PM_REPALL;		}	}		/**	 * 	 * @return	 */	public int getRepeatMode(){		return iCurrPlaymode;	}		/**	 * 	 * @param list	 * @param action	 */	public void enqueue(List<BaseData> list, int action)	{		if(!LocalPhotoList.containsAll(list)){			LocalPhotoList.clear();			LocalPhotoList.addAll(list);		}else{			Log.d(TAG,"duplicate data addition,skip it");		}	}		/**	 * 	 * @return	 */	public List<BaseData> getQueue()	{		//Log.d(TAG,"getQueue LocalPhotoList "+LocalPhotoList);		return LocalPhotoList;	}		/**	 * 	 * @param index	 */	public void setQueuePosition(int index)	{		iCurrPosition = index;	}		/**	 * 	 * @return	 */	public int getQueuePosition()	{		return iCurrPosition;	}		/**	 * 	 * @return	 */	public String getTrackName()	{		if( (LocalPhotoList!= null) && (iCurrPosition < LocalPhotoList.size()))		{			if((LocalPhotoList.get(iCurrPosition).getName() != null) && !((LocalPhotoList.get(iCurrPosition).getName()).equals("")))			{				return LocalPhotoList.get(iCurrPosition).getName();			}		}		return null;	}	/**	 * 	 * @return	 */	public Bitmap getBitmapOfAlbum()	{		if( (LocalPhotoList!= null) && (iCurrPosition < LocalPhotoList.size()))		{			byte[] byteArray = LocalPhotoList.get(iCurrPosition).getAlbumBitmap();			if((byteArray != null) && (byteArray.length > 0))			{				return BitmapFactory.decodeByteArray(byteArray, 0,byteArray.length);			}		}		return null;	}	/**	 * 	 * @param index	 * @return	 */	public BaseData getID3BaseData(int index){		BaseData bd = null;		if(index <0 || index > LocalPhotoList.size()){			Log.e(TAG,"getID3BaseData [FAIL],index "+index);			return null;		}		return bd;	}		/**	 * Service callback interface	 */	private IPhotoStatusCB defPhotoStatusListener = new IPhotoStatusCB() {		@Override		public void photoPrepared() {		}		@Override		public void photoPlayErrorWithMsg(String errMessage) {		}				@Override		public void photoCompleted() {			next();		}			@Override		public void updatePlaybackStatus(PlaybackStatus pbstatus) {		}				@Override		public void handleMessageInfo(String strMessage){					}				@Override		public void photoFinish(){		}	};	}