package com.zhonghong.media.util;import java.io.File;import java.math.BigInteger;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Environment;import android.util.Log;/*import com.jrm.localmm.R;*//** *  * @author victorchen *  * @date 2011-07-27 */public class UserTools {	private static final String FILE_SIZE_B = "B";	private static final String FILE_SIZE_KB = "KB";	private static final String FILE_SIZE_MB = "MB";	private static final String FILE_SIZE_GB = "GB";	private static final String FILE_SIZE_TB = "TB";	private static final String FILE_SIZE_NA = "N/A";	/**	 * 	 * @param path	 * @return 	 */	public static boolean isFileExist(String path) {		return isFileExist(new File(path));	}	/**	 * 	 * @param file	 *            {@link File}.	 */	public static boolean isFileExist(File file) {		if (file == null) {			return false;		}		return file.exists();	}	/**	 * @param duration	 * 	 * @return 	 */	public static String formatDuration(long duration) {		long time = duration / 1000;		if (time <= 0) {			return "--:--:--";		}		long min = time / 60 % 60;		long hour = time / 60 / 60;		long second = time % 60;		return String.format("%02d:%02d:%02d", hour, min, second);	}	/**	 * 	 * @param duration	 * 	 * @return 	 */	public static String formatDuration2(int duration) {		int time = duration / 1000;		if(time == 0 && duration > 0)		{		    time = 1;		}		int min = time / 60;		int second = time % 60;		return String.format("%02d:%02d", min, second);	}		/**	 * fromat second to druation	 */	public static String formatSecDuration2(int duration) {		int min = duration / 60;		int second = duration % 60;		return String.format("%02d:%02d", min, second);	}		/**	 * @param size	 * 	 * @return	 */	public static String formatSize(BigInteger size) {		if (size.compareTo(BigInteger.valueOf(1024)) == -1) {			return (size.toString() + FILE_SIZE_B);		} else if (size.compareTo(BigInteger.valueOf(1024 * 1024)) == -1) {			return (size.divide(BigInteger.valueOf(1024)).toString() + FILE_SIZE_KB);		} else if (size.compareTo(BigInteger.valueOf(1024 * 1024 * 1024)) == -1) {			return (size.divide(BigInteger.valueOf(1024 * 1024)).toString() + FILE_SIZE_MB);		} else if (size.compareTo(BigInteger				.valueOf(1024 * 1024 * 1024 * 1024L)) == -1) {			return (size.divide(BigInteger.valueOf(1024 * 1024 * 1024))					.toString() + FILE_SIZE_GB);		} else if (size.compareTo(BigInteger				.valueOf(1024 * 1024 * 1024 * 1024L).multiply(				BigInteger.valueOf(1024))) == -1) {			return (size.divide(BigInteger.valueOf(1024 * 1024 * 1024 * 1024L))					.toString() + FILE_SIZE_TB);		}		return FILE_SIZE_NA;	}}